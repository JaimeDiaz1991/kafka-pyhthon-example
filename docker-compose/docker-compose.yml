version: '2'
services:
  zoo1:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zoo1
    ports:
    - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
    - ./zoo1/data:/data
    - ./zoo1/datalog:/datalog
  kafka1:
    image: confluentinc/cp-kafka:4.0.0
    hostname: kafka1
    ports:
    - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: '24'
      KAFKA_METRIC_REPORTER: io.confluent.support.metrics.MetricsReporter
      KAFKA_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      KAFKA_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: localhost:9092
    volumes:
    - ./kafka1/data:/var/lib/kafka/data
    depends_on:
    - zoo1
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:4.0.0
    hostname: kafka-schema-registry
    restart: unless-stopped
    ports:
    - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zoo1:2181
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
    - zoo1
    - kafka1
  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.3
    hostname: kafka-schema-registry-ui
    ports:
    - 8001:8000
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: 'true'
    depends_on:
    - kafka-schema-registry
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.0.0
    hostname: kafka-rest-proxy
    ports:
    - 8082:8082
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: localhost:9092
    depends_on:
    - zoo1
    - kafka1
    - kafka-schema-registry
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    hostname: kafka-topics-ui
    ports:
    - 8000:8000
    environment:
      KAFKA_REST_PROXY_URL: http://kafka-rest-proxy:8082/
      PROXY: 'true'
    depends_on:
    - zoo1
    - kafka1
    - kafka-schema-registry
    - kafka-rest-proxy
  kafka-connect:
    build: ./kafka-connectors
    image: firefly/kafka-connect
    hostname: kafka-connect
    ports:
    - 8083:8083
    environment:
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx1g"
      CONNECT_BOOTSTRAP_SERVERS: localhost:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: /usr/share/java,/opt/connectors
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    depends_on:
    - zoo1
    - kafka1
    - kafka-schema-registry
  ksql-server:
    image: "confluentinc/ksql-cli:4.1.0"
    hostname: ksql-server
    ports:
      - '8088:8088'
    depends_on:
      - kafka1
      - kafka-schema-registry
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b localhost:9092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready kafka-schema-registry 8081 20 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 2 && \
                       /usr/bin/ksql-server-start /etc/ksql/ksql-server.properties'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_OPTS: "-Dbootstrap.servers=localhost:9092 -Dksql.schema.registry.url=http://kafka-schema-registry:8081 -Dlisteners=http://0.0.0.0:8088"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
  
  ksql-cli:
    image: "confluentinc/ksql-cli:4.1.0"
    hostname: ksql-cli
    depends_on:
      - kafka1
      - kafka-schema-registry
      - ksql-server
    command: "perl -e 'while(1){ sleep 99999 }'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: localhost:9092
      STREAMS_SCHEMA_REGISTRY_HOST: kafka-schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.3
    hostname: kafka-connect-ui
    ports:
    - 8003:8000
    environment:
      CONNECT_URL: http://kafka-connect:8083/
      PROXY: 'true'
    depends_on:
    - kafka-connect
  zoonavigator-web:
    image: elkozmon/zoonavigator-web:0.2.3
    ports:
    - 8004:8000
    environment:
      API_HOST: zoonavigator-api
      API_PORT: 9000
      AUTO_CONNECT_CONNECTION_STRING: zoo1:2181
    links:
    - zoonavigator-api
    depends_on:
    - zoonavigator-api
    restart: unless-stopped
  zoonavigator-api:
    image: elkozmon/zoonavigator-api:0.2.3
    environment:
      SERVER_HTTP_PORT: 9000
    restart: unless-stopped
    depends_on:
    - zoo1
  control-center:
    image: confluentinc/cp-enterprise-control-center
    hostname: control-center
    depends_on:
    - zoo1
    - kafka1
    - kafka-schema-registry
    - kafka-connect
    ports:
    - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: localhost:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zoo1:2181
      CONTROL_CENTER_CONNECT_CLUSTER: kafka-connect:8083
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021